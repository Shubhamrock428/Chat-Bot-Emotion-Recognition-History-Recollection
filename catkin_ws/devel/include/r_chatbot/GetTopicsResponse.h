// Generated by gencpp from file r_chatbot/GetTopicsResponse.msg
// DO NOT EDIT!


#ifndef R_CHATBOT_MESSAGE_GETTOPICSRESPONSE_H
#define R_CHATBOT_MESSAGE_GETTOPICSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <r_chatbot/StringList.h>

namespace r_chatbot
{
template <class ContainerAllocator>
struct GetTopicsResponse_
{
  typedef GetTopicsResponse_<ContainerAllocator> Type;

  GetTopicsResponse_()
    : top_topics()  {
    }
  GetTopicsResponse_(const ContainerAllocator& _alloc)
    : top_topics(_alloc)  {
  (void)_alloc;
    }



   typedef  ::r_chatbot::StringList_<ContainerAllocator>  _top_topics_type;
  _top_topics_type top_topics;




  typedef boost::shared_ptr< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetTopicsResponse_

typedef ::r_chatbot::GetTopicsResponse_<std::allocator<void> > GetTopicsResponse;

typedef boost::shared_ptr< ::r_chatbot::GetTopicsResponse > GetTopicsResponsePtr;
typedef boost::shared_ptr< ::r_chatbot::GetTopicsResponse const> GetTopicsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r_chatbot::GetTopicsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace r_chatbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'r_chatbot': ['/media/sf_GitHub/Perception_Robotics/catkin_ws/src/r_chatbot/msg'], 'std_msgs': ['/media/sf_GitHub/Perception_Robotics/catkin_ws/src/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0cc0cdb0b2dadb61c6e109d7df192ea";
  }

  static const char* value(const ::r_chatbot::GetTopicsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0cc0cdb0b2dadb6ULL;
  static const uint64_t static_value2 = 0x1c6e109d7df192eaULL;
};

template<class ContainerAllocator>
struct DataType< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r_chatbot/GetTopicsResponse";
  }

  static const char* value(const ::r_chatbot::GetTopicsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
StringList top_topics\n\
\n\
================================================================================\n\
MSG: r_chatbot/StringList\n\
string[] stringlist\n\
";
  }

  static const char* value(const ::r_chatbot::GetTopicsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top_topics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTopicsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r_chatbot::GetTopicsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r_chatbot::GetTopicsResponse_<ContainerAllocator>& v)
  {
    s << indent << "top_topics: ";
    s << std::endl;
    Printer< ::r_chatbot::StringList_<ContainerAllocator> >::stream(s, indent + "  ", v.top_topics);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R_CHATBOT_MESSAGE_GETTOPICSRESPONSE_H
